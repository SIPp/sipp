<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE scenario SYSTEM "sipp.dtd">

<!-- This program is free software; you can redistribute it and/or      -->
<!-- modify it under the terms of the GNU General Public License as     -->
<!-- published by the Free Software Foundation; either version 2 of the -->
<!-- License, or (at your option) any later version.                    -->
<!--                                                                    -->
<!-- This program is distributed in the hope that it will be useful,    -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of     -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      -->
<!-- GNU General Public License for more details.                       -->
<!--                                                                    -->
<!-- You should have received a copy of the GNU General Public License  -->
<!-- along with this program; if not, write to the                      -->
<!-- Free Software Foundation, Inc.,                                    -->
<!-- 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA             -->
<!--                                                                    -->
<!--                 Sipp default 'uas' scenario.                       -->
<!--                                                                    -->

<scenario name="Basic UAS responder">
  <!-- By adding rrs="true" (Record Route Sets), the route sets         -->
  <!-- are saved and used for following messages sent. Useful to test   -->
  <!-- against stateful SIP proxies/B2BUAs.                             -->
  <!-- Adding ignoresdp="true" here would ignore the SDP data: that     -->
  <!-- can be useful if you want to reject reINVITEs and keep the       -->
  <!-- media stream flowing.                                            -->
  <recv request="INVITE" crlf="true">
	   <action>
         <ereg regexp="sip:[+1]*(.*?)\@([0123456789.a-zA-Z]*)" search_in="hdr" header="To:" assign_to="1,2,3" />
         <log message="To Match on [$1] - User is [$2] Domain is [$3] "/>
         <ereg regexp="sip:[+1]*([0-9a-zA-Z]*)?\@([0-9.a-zA-Z]*)" search_in="hdr" header="From:" assign_to="4,5,6" />
         <log message="From Match on [$4] - User is [$5] Domain is [$6] "/>
	</action>

  </recv>

  <!-- The '[last_*]' keyword is replaced automatically by the          -->
  <!-- specified header if it was present in the last message received  -->
  <!-- (except if it was a retransmission). If the header was not       -->
  <!-- present or if no message has been received, the '[last_*]'       -->
  <!-- keyword is discarded, and all bytes until the end of the line    -->
  <!-- are also discarded.                                              -->
  <!--                                                                  -->
  <!-- If the specified header was present several times in the         -->
  <!-- message, all occurrences are concatenated (CRLF separated)       -->
  <!-- to be used in place of the '[last_*]' keyword.                   -->

  <send>
    <![CDATA[

      SIP/2.0 180 Ringing
      [last_Via:]
      [last_From:]
      [last_To:];tag=[pid]SIPpTag01[call_number]
      [last_Call-ID:]
      [last_CSeq:]
      Contact: <sip:[local_ip]:[local_port];transport=[transport]>
      Content-Length: 0

    ]]>
      <action>
        <assignstr assign_to="calling" value=""/>
        <assignstr assign_to="called" value=""/>
        <assignstr assign_to="msgDone" value="0"/>
        <assignstr assign_to="counter" value="0"/>
	<log message="executing lua function my_lua_func calling [$5] called [$2]" />
	<exec command="luathread@my_lua_func calling [$5] called [$2] msgDone 0" />
        <log  message="retkey [$retkey] calling = [$calling] called = [$called]"/>
    </action>

  </send>


  <!-- Do a loop looking for the data to be done -->

 <label id="start_of_loop"/>
    <pause milliseconds="100" />
    <!-- retrieve our variables back from our previous read -->
    <nop>
             <action>
                <log message="luaread@[$retkey] 0" />
                <exec command="luaread@[$retkey] 0" />
                <strcmp assign_to="result" variable="msgDone" value="0" />
                <log message="result for msgDone  check = [$msgDone]"/>
                <!-- <log  message="retkey = [$retkey] calling = [$calling] called = [$called]"/> -->
             </action>
   </nop>

  <!-- When we're done processing jump to finished else keep looping -->
  <nop next="finished" test="result"/>

  <!-- Increment the counter and continue looping up to 10 times-->
  <nop>
    <action>
      <add assign_to="counter" value="1"/>
      <test assign_to="flag_limit" variable="counter"
                compare="greater_than_equal" value="100"/>
        <log message="flag_limit=([$flag_limit])" />
    </action>
  </nop>

  <nop next="finished" test="flag_limit" />

  <nop next="start_of_loop"/>

 <label id="finished" />

    <nop>
        <action>
                <!-- Delete the shared memory because we're done -->
                <log message="finished!" />
                <log message="luaread@[$retkey] 1" />
                <exec command="luaread@[$retkey] 1" />
        </action>
  </nop>

  <!-- Send the answer with a translated called number in a custom header -->

  <send retrans="500">
    <![CDATA[

      SIP/2.0 200 OK
      [last_Via:]
      [last_From:]
      [last_To:];tag=[pid]SIPpTag01[call_number]
      [last_Call-ID:]
      [last_CSeq:]
      X-Translated-Called: [$called]
      Contact: <sip:[local_ip]:[local_port];transport=[transport]>
      Content-Type: application/sdp
      Content-Length: [len]

      v=0
      o=user1 53655765 2353687637 IN IP[local_ip_type] [local_ip]
      s=-
      c=IN IP[media_ip_type] [media_ip]
      t=0 0
      m=audio [media_port] RTP/AVP 0
      a=rtpmap:0 PCMU/8000

    ]]>
  </send>

  <recv request="ACK"
        optional="true"
        rtd="true"
        crlf="true">
  </recv>

  <recv request="BYE">
  </recv>

  <send>
    <![CDATA[

      SIP/2.0 200 OK
      [last_Via:]
      [last_From:]
      [last_To:]
      [last_Call-ID:]
      [last_CSeq:]
      Contact: <sip:[local_ip]:[local_port];transport=[transport]>
      Content-Length: 0

    ]]>
  </send>

  <!-- Keep the call open for a while in case the 200 is lost to be     -->
  <!-- able to retransmit it if we receive the BYE again.               -->
  <timewait milliseconds="4000"/>


  <!-- definition of the response time repartition table (unit is ms)   -->
  <ResponseTimeRepartition value="10, 20, 30, 40, 50, 100, 150, 200"/>

  <!-- definition of the call length repartition table (unit is ms)     -->
  <CallLengthRepartition value="10, 50, 100, 500, 1000, 5000, 10000"/>

</scenario>

