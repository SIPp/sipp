GitLab fork of the Uniberg@GitLab sipp@GitHub fork:
 - The GitLab fork is intended for continuous checkins of the current work on the "TLS resumption on SIP redundancy" project.
 - The Uniberg@GitLab will be used as push target for all changes related to the "TLS resumption on SIP redundancy" project and to eventually create a GitHub pull request for sipp@GitHub.

Please note:
  - It is not possible to fork a public accessible GitHub repository and keep it private.
  - It is not possible to create pull requests from a GitLab repository to use within GitHub
    (at least I don't now how to do that)
  - Workflow 1.) enables you to keep your private GitLab repository in sync with
    a public accessible GitHub repository while integrating and tracking/managing your changes.  

1.) Workflow to keep the "Uniberg@GitLab sipp@GitHub fork" up to date:

   i.) Create a new directory (e.g. sipp-fork) and change to it
      $ mkdir sipp-fork
      $ cd sipp-fork
      
  ii.) Clone the "Uniberg@GitLab sipp@GitHub fork"
      $ git clone https://git.uniberg.com/tls-resumption-on-sip-redundancy/sipp.git

 iii.) Add the original "sipp@GitHub" repository as additional remote and
       name it e.g. "upstream"
      $ git remote add upstream https://github.com/SIPp/sipp.git

  iv.) Fetch the branches and their respective commits from the upstream
       repository. Commits to master will be stored in a local branch, upstream/master.
      $ git fetch upstream
      > remote: Counting objects: 75, done.
      > remote: Compressing objects: 100% (53/53), done.
      > remote: Total 62 (delta 27), reused 44 (delta 9)	
      > Unpacking objects: 100% (62/62), done.
      > From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY
      >  * [new branch]      master     -> upstream/master

   v.) Check out your fork's local master branch.
      $ git checkout master
      > Switched to branch 'master'

  vi.) Merge the changes from upstream/master into your local master branch. This brings
       your fork's master branch into sync with the upstream repository, without losing
       your local changes.
      $ git merge upstream/master
      > Updating a422352..5fdff0f
      > Fast-forward
      >  README                    |    9 -------
      >  README.md                 |    7 ++++++
      >  2 files changed, 7 insertions(+), 9 deletions(-)
      >  delete mode 100644 README
      >  create mode 100644 README.md

       If your local branch didn't have any unique commits, Git will instead perform a
       "fast-forward":
      $ git merge upstream/master
      > Updating 34e91da..16c56ad
      > Fast-forward
      >  README.md                 |    5 +++--
      >  1 file changed, 3 insertions(+), 2 deletions(-)

 vii.) Push the changes to update your fork
      $ push origin master
